// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  phoneNumber String?
  dateOfBirth DateTime?
  oldEmail    String?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  STAFF
  ADMIN
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  isVerified    Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String?
  profile       Profile?
  role          Role      @default(USER)

  forgotPasswordToken       String?
  forgotPasswordTokenExpiry DateTime?
  verifyToken               String?
  verifyTokenExpiry         DateTime?

  @@map("users")
}

model GCPData {
  id               String   @id @default(cuid())
  urlExpiryDate    DateTime
  blobName         String
  assetId          String   @unique
  assetName        String
  assetType        String
  validityDuration Int      @default(7)
  downloadUrl      String
}

enum WorkSchedule {
  FULL_TIME
  PART_TIME
  CONTRACTOR
  TEMPORARY
  SEASONAL
  NOT_SPECIFIED
}

enum ContractType {
  INTERNSHIP
  DIRECT_HIRE
  NOT_SPECIFIED
  CONTRACT_TO_HIRE
  TEMPORARY
  TEMPORARY_TO_HIRE
  SELF_EMPLOYED
  CONTRACT
  SEASONAL
  APPRENTICESHIP
  RECRUITMENT_RESERVE
  ON_CALL
  VOLUNTEER
}

model Address {
  id        String  @id @default(cuid())
  city      String
  state     String
  zipCode   String
  country   String
  companyId String  @unique
  company   Company @relation(fields: [companyId], references: [id])

  addressLineOne String
  addressLineTwo String
}

model EducationLevel {
  id    String @id @default(cuid())
  label String @unique
  Job   Job[]
}

model Experience {
  id    String @id @default(cuid())
  label String @unique
  Job   Job[]
}

model Sector {
  id    String @id @default(cuid())
  label String @unique
  Job   Job[]
}

model Company {
  id      String   @id @default(cuid())
  email   String
  address Address?
  Job     Job[]
}

model Job {
  id             String       @id @default(cuid())
  title          String
  description    String
  workSchedule   WorkSchedule @default(NOT_SPECIFIED)
  country        String
  city           String
  jobSector      String
  startDate      String
  occupation     String?
  educationLevel String
  contractType   ContractType @default(NOT_SPECIFIED)
  companyId      String?
  company        Company?     @relation(fields: [companyId], references: [id])

  educationLevelId String?
  education        EducationLevel? @relation(fields: [educationLevelId], references: [id])
  experiencelId    String?
  experience       Experience?     @relation(fields: [experiencelId], references: [id])
  sector           Sector?         @relation(fields: [sectorId], references: [id])
  sectorId         String?
  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}
