generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model JobSeekerProfile {
  id             String  @id @default(cuid())
  userId         String  @unique
  occupation     String?
  country        String?
  expectedSalary String?
  currentSalary  String?
  currency       String?

  educationLevelId  String?
  experienceId      String?
  sectorId          String?
  cvHeadLine        String?
  profileSummary    String?
  certificates      Certificate[]
  employmentDetails EmploymentDetails[]
  education         EducationLevel?     @relation(fields: [educationLevelId], references: [id])
  experience        Experience?         @relation(fields: [experienceId], references: [id])
  sector            Sector?             @relation(fields: [sectorId], references: [id])
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills            Skill[]
  desiredJob        DesiredJob?
  personalDetails   PersonalDetails?
  yearsOfExperience Int?
  educationDetails  EducationDetails[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model DesiredJob {
  id                 String           @id @default(cuid())
  designation        String
  location           String
  industry           String
  jobSeekerProfileId String           @unique
  jobSeekerProfile   JobSeekerProfile @relation(fields: [jobSeekerProfileId], references: [id], onDelete: Cascade)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model EmploymentDetails {
  id                 String           @id @default(cuid())
  designation        String?
  company            String?
  location           String?
  description        String?
  currentlyWorking   Boolean          @default(false)
  startMonth         String
  startYear          String
  endMonth           String?
  endYear            String?
  jobSeekerProfileId String
  profile            JobSeekerProfile @relation(fields: [jobSeekerProfileId], references: [id], onDelete: Cascade)
}

model EducationDetails {
  id                 String           @id @default(cuid())
  level              String
  course             String
  college            String
  collegeLocation    String
  startYear          String?
  endYear            String?
  jobSeekerProfileId String
  profile            JobSeekerProfile @relation(fields: [jobSeekerProfileId], references: [id], onDelete: Cascade)
}

model PersonalDetails {
  id                     String           @id @default(cuid())
  dateOfBirth            DateTime
  gender                 String
  nationality            String
  maritalStatus          String
  drivingLicense         Boolean
  currentLocation        String
  languagesKnown         String
  visaStatus             String
  religion               String?
  alternateEmail         String?
  alternateContactNumber String?
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  jobSeekerProfileId     String           @unique
  jobSeekerProfile       JobSeekerProfile @relation(fields: [jobSeekerProfileId], references: [id], onDelete: Cascade)
}

model Skill {
  id                 String           @id @default(cuid())
  skill              String
  jobSeekerProfileId String
  profile            JobSeekerProfile @relation(fields: [jobSeekerProfileId], references: [id], onDelete: Cascade)
}

model Certificate {
  id                    String           @id @default(cuid())
  name                  String
  lastUsed              String
  totalExperienceYears  Int              @default(0)
  totalExperienceMonths Int              @default(0)
  jobSeekerProfileId    String
  profile               JobSeekerProfile @relation(fields: [jobSeekerProfileId], references: [id], onDelete: Cascade)
}

model JobSeekerProfilePercentage {
  id                 String @id @default(cuid())
  jobSeekerProfileId String @unique
  percentage         Int    @default(0)
}

model Profile {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  phoneNumber String?
  dateOfBirth DateTime?
  oldEmail    String?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Candidate {
  id          String @id @default(cuid())
  candidateId String
  employerId  String
  employer    User   @relation(fields: [employerId], references: [id], onDelete: Cascade)

  @@unique([candidateId, employerId])
}

model User {
  id                        String             @id @default(uuid())
  name                      String?
  email                     String             @unique
  emailVerified             DateTime?
  isVerified                Boolean            @default(false)
  image                     String?
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  password                  String?
  role                      Role               @default(USER)
  forgotPasswordToken       String?
  forgotPasswordTokenExpiry DateTime?
  verifyToken               String?
  verifyTokenExpiry         DateTime?
  applications              Application[]
  cv                        CV?
  candidates                Candidate[]
  Job                       Job[]
  jobSeekerProfile          JobSeekerProfile?
  Post                      Post[]
  profile                   Profile?
  employerProfile           EmployerProfile?
  address                   Address?
  Notification              Notification[]
  jobAlerts                 JobAlert[]
  subscriptionPlans         SubscriptionPlan[]

  @@map("users")
}

model CV {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GCPData {
  id               String    @id @default(cuid())
  urlExpiryDate    DateTime?
  blobName         String?
  assetId          String    @unique
  assetName        String
  assetType        String
  validityDuration Int?      @default(7)
  downloadUrl      String?   @db.VarChar(1000)
}

model EmployerProfile {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  company Company?
}

model Address {
  id         String @id @default(cuid())
  city       String
  postalCode String
  country    String

  addressLineOne String
  addressLineTwo String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id           String  @id @default(cuid())
  companyEmail String? @unique
  companyName  String  @unique
  jobs         Job[]

  employerProfileId String          @unique
  employerProfile   EmployerProfile @relation(fields: [employerProfileId], references: [id], onDelete: Cascade)

  sectorId  String?
  sector    Sector?    @relation(fields: [sectorId], references: [id])
  jobAlerts JobAlert[]
}

model EducationLevel {
  id               String             @id @default(cuid())
  label            String             @unique
  course           String?
  college          String?
  colegeLocation   String?
  Job              Job[]
  JobSeekerProfile JobSeekerProfile[]
}

model Experience {
  id               String             @id @default(cuid())
  label            String             @unique
  Job              Job[]
  JobSeekerProfile JobSeekerProfile[]
}

model Sector {
  id               String             @id @default(cuid())
  label            String             @unique
  Job              Job[]
  JobSeekerProfile JobSeekerProfile[]
  Company          Company[]
}

enum JOBTYPE {
  NORMAL
  WALK_IN_INTERVIEW
}

enum JOBSTATUS {
  OPEN
  CLOSED
  DRAFT
}

enum JOBSOURCE {
  COMPANY
  JOB_BOARD
  SCRAPPER
}

enum CURRENCY {
  AED
  OMR
  QAR
  BHD
  KWD
  SAR
}

enum PREFERRED_APPLICANT_GENDER {
  MALE
  FEMALE
  ALL
}

model Job {
  id                       String                     @id @default(cuid())
  title                    String
  description              String                     @db.Text
  howToApply               String?
  workSchedule             WorkSchedule               @default(NOT_SPECIFIED)
  country                  String
  city                     String
  startDate                String?
  occupation               String?
  contractType             ContractType               @default(NOT_SPECIFIED)
  ownerId                  String?
  companyId                String?
  companyName              String?
  published                Boolean                    @default(false)
  confidential             Boolean                    @default(true)
  numberOfPositions        Int                        @default(1)
  preferredApplicantGender PREFERRED_APPLICANT_GENDER @default(ALL)
  datePosted               DateTime?
  educationLevelId         String?
  experienceId             String?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  isFeatured               Boolean                    @default(false)
  isOpen                   Boolean                    @default(true)
  salary                   String?
  currency                 String?
  salaryPeriod             String                     @default("Month")
  applications             Application[]
  company                  Company?                   @relation(fields: [companyId], references: [id])
  education                EducationLevel?            @relation(fields: [educationLevelId], references: [id])
  experience               Experience?                @relation(fields: [experienceId], references: [id])
  owner                    User?                      @relation(fields: [ownerId], references: [id])
  sectorId                 String?
  sector                   Sector?                    @relation(fields: [sectorId], references: [id])
  Purchase                 Purchase[]
  jobType                  JOBTYPE                    @default(NORMAL)
  source                   JOBSOURCE                  @default(COMPANY)
  metrics                  JobMetrics[]

  isExternal   Boolean @default(false)
  externalLink String?
}

model JobMetrics {
  id                String   @id @default(cuid())
  totalApplications Int      @default(0)
  view              Int      @default(0)
  share             Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  jobId             String
  job               Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  visitorId         String

  @@unique([visitorId, jobId])
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

model Application {
  id          String            @id @default(cuid())
  userId      String
  jobId       String
  job         Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  CoverLetter CoverLetter[]

  @@unique([userId, jobId])
}

model CoverLetter {
  id            String      @id @default(uuid())
  content       String
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model Purchase {
  id        String         @id @default(uuid())
  userId    String
  status    PurchaseStatus @default(PENDING)
  orderID   String         @unique
  jobId     String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  job       Job            @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
  @@index([jobId])
}

model SubscriptionPlan {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId    String
  plan      Plan      @relation(fields: [planId], references: [id])
  startDate DateTime  @default(now())
  endDate   DateTime
  status    SubStatus @default(ACTIVE)
  paymentId String? // Reference to payment processor ID
  autoRenew Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("subscriptions")
}

enum SubStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  TRIAL
}

enum PlanType {
  FREE
  BASIC
  STANDARD
  PREMIUM
}

model Plan {
  id            String             @id @default(cuid())
  name          PlanType // e.g., "Basic", "Standard", "Premium"
  description   String?
  price         Float
  billingCycle  BillingCycle       @default(MONTHLY)
  userType      Role // To determine if it's for job seekers or employers
  isActive      Boolean            @default(true)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  subscriptions SubscriptionPlan[]
  planFeatures  PlanFeature[]

  @@map("plans")
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  ANNUALLY
}

enum FeatureType {
  UNLIMITED_JOB_POSTING
  UNLIMITED_JOB_APPLICATION
  UNLIMITED_CV_DOWNLOAD
  UNLIMITED_COMPANY_PROFILE_VIEWS
  UNLIMITED_JOB_ALERTS
  UNLIMITED_COVER_LETTER_GENERATION
  COVER_LETTER_GENERATION
  UNLIMITED_CV_GENERATION
  CV_GENERATION
  JOB_ALERTS
  CV_DOWNLOAD
  JOB_APPLICATION_TRACKING
  INTERVIEW_SCHEDULING
  EMPLOYER_PROFILE
}

model Feature {
  id           String        @id @default(cuid())
  type         FeatureType   @unique // e.g., "job_application", "cv_generation", etc.
  displayName  String // Human-readable name
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  planFeatures PlanFeature[]

  @@unique([type, displayName])
  @@map("features")
}

model PlanFeature {
  id         String   @id @default(cuid())
  planId     String
  plan       Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  featureId  String
  feature    Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)
  usageLimit Int? // Null means unlimited
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([planId, featureId])
  @@map("plan_features")
}

model ScrapedJob {
  id                String   @id @default(uuid())
  title             String
  description       String
  howToApply        String?
  workSchedule      String
  country           String
  city              String
  startDate         String?
  datePosted        String?
  occupation        String?
  contractType      String
  company           String?
  numberOfPositions Int      @default(1)
  educationLevel    String?
  experienceLevel   String?
  sector            String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Service {
  id          String  @id @default(cuid())
  title       String  @unique
  description String?
  slug        String  @unique
}

model Post {
  id          String   @id @default(cuid())
  title       String   @unique
  content     String?  @db.Text
  epigraph    String?  @db.Text
  imageUrl    String?
  authorId    String?
  isPublished Boolean  @default(false)
  slug        String   @unique
  views       Int      @default(0)
  categoryId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  isFeatured  Boolean  @default(false)
  author      User?    @relation(fields: [authorId], references: [id])
}

model Occupation {
  id             String          @id @default(cuid())
  title          String          @unique
  subOccupations SubOccupation[]
}

model SubOccupation {
  id           String     @id @default(cuid())
  title        String     @unique
  occupationId String
  occupation   Occupation @relation(fields: [occupationId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  STAFF
  ADMIN
  JOB_SEEKER
  EMPLOYER
}

enum WorkSchedule {
  FULL_TIME
  PART_TIME
  CONTRACTOR
  TEMPORARY
  SEASONAL
  NOT_SPECIFIED
}

enum ContractType {
  INTERNSHIP
  DIRECT_HIRE
  NOT_SPECIFIED
  CONTRACT_TO_HIRE
  TEMPORARY
  TEMPORARY_TO_HIRE
  SELF_EMPLOYED
  CONTRACT
  SEASONAL
  APPRENTICESHIP
  RECRUITMENT_RESERVE
  ON_CALL
  VOLUNTEER
}

enum PurchaseStatus {
  PENDING
  COMPLETED
}

enum NOTIFICATION_TYPES {
  NEW_JOB_POSTING
  JOB_APPLICATION_SUBMITTED
  JOB_APPLICATION_ACCEPTED
  JOB_APPLICATION_REJECTED
  INTERVIEW_SCHEDULED
  INTERVIEW_RESCHEDULED
  INTERVIEW_CANCELLED
  JOB_OFFER_MADE
  JOB_OFFER_ACCEPTED
  JOB_OFFER_REJECTED
}

model Notification {
  id         String             @id @default(cuid())
  type       NOTIFICATION_TYPES
  read       Boolean            @default(false)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  userId     String
  user       User               @relation(fields: [userId], references: [id])
  resourceId String?
  fromId     String
  message    String?
}

model JobAlert {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  city String?

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  // Refactor lists of primitives into related models
  educationLevelIds EducationLevelOnJobAlert[]
  sectorIds         SectorOnJobAlert[]
  workSchedules     WorkScheduleOnJobAlert[]
  contractTypes     ContractTypeOnJobAlert[]
  countries         CountryOnJobAlert[]

  jobType JOBTYPE @default(NORMAL)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  occupation String?
  jobId      String?
}

// New models for lists of primitives
model EducationLevelOnJobAlert {
  id             String   @id @default(cuid())
  jobAlertId     String
  jobAlert       JobAlert @relation(fields: [jobAlertId], references: [id], onDelete: Cascade)
  educationLevel String
}

model SectorOnJobAlert {
  id         String   @id @default(cuid())
  jobAlertId String
  jobAlert   JobAlert @relation(fields: [jobAlertId], references: [id], onDelete: Cascade)
  sector     String
}

model WorkScheduleOnJobAlert {
  id           String       @id @default(cuid())
  jobAlertId   String
  jobAlert     JobAlert     @relation(fields: [jobAlertId], references: [id], onDelete: Cascade)
  workSchedule WorkSchedule
}

model ContractTypeOnJobAlert {
  id           String       @id @default(cuid())
  jobAlertId   String
  jobAlert     JobAlert     @relation(fields: [jobAlertId], references: [id], onDelete: Cascade)
  contractType ContractType
}

model CountryOnJobAlert {
  id         String   @id @default(cuid())
  jobAlertId String
  jobAlert   JobAlert @relation(fields: [jobAlertId], references: [id], onDelete: Cascade)
  country    String
}

enum SUBSCRIPTION_TYPE {
  NEWSLETTER
  JOB_POSTINGS
}

model Subscription {
  id    String @id @default(cuid())
  email String

  type SUBSCRIPTION_TYPE
}
