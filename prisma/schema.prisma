// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model JobSeekerProfile {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  occupation String
  country    String

  educationLevelId String?
  education        EducationLevel? @relation(fields: [educationLevelId], references: [id])
  experienceId     String?
  experience       Experience?     @relation(fields: [experienceId], references: [id])
  sector           Sector?         @relation(fields: [sectorId], references: [id])
  sectorId         String?
}

model Profile {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  phoneNumber String?
  dateOfBirth DateTime?
  oldEmail    String?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Candidate {
  id String @id @default(cuid())

  candidateId String

  employerId String
  employer   User   @relation(fields: [employerId], references: [id], onDelete: Cascade)

  @@unique([candidateId, employerId])
}

enum Role {
  USER
  STAFF
  ADMIN
  JOB_SEEKER
  EMPLOYER
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  isVerified    Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String?
  profile       Profile?
  role          Role      @default(USER)

  forgotPasswordToken       String?
  forgotPasswordTokenExpiry DateTime?
  verifyToken               String?
  verifyTokenExpiry         DateTime?
  Job                       Job[]
  Company                   Company[]
  cv                        CV?
  jobSeekerProfile          JobSeekerProfile?
  candidates                Candidate[]
  Post                      Post[]

  @@map("users")
}

model CV {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GCPData {
  id               String   @id @default(cuid())
  urlExpiryDate    DateTime
  blobName         String
  assetId          String   @unique
  assetName        String
  assetType        String
  validityDuration Int      @default(7)
  downloadUrl      String
}

enum WorkSchedule {
  FULL_TIME
  PART_TIME
  CONTRACTOR
  TEMPORARY
  SEASONAL
  NOT_SPECIFIED
}

enum ContractType {
  INTERNSHIP
  DIRECT_HIRE
  NOT_SPECIFIED
  CONTRACT_TO_HIRE
  TEMPORARY
  TEMPORARY_TO_HIRE
  SELF_EMPLOYED
  CONTRACT
  SEASONAL
  APPRENTICESHIP
  RECRUITMENT_RESERVE
  ON_CALL
  VOLUNTEER
}

model Address {
  id        String  @id @default(cuid())
  city      String
  state     String
  zipCode   String
  country   String
  companyId String  @unique
  company   Company @relation(fields: [companyId], references: [id])

  addressLineOne String
  addressLineTwo String
}

model EducationLevel {
  id               String             @id @default(cuid())
  label            String             @unique
  Job              Job[]
  JobSeekerProfile JobSeekerProfile[]
}

model Experience {
  id               String             @id @default(cuid())
  label            String             @unique
  Job              Job[]
  JobSeekerProfile JobSeekerProfile[]
}

model Sector {
  id               String             @id @default(cuid())
  label            String             @unique
  Job              Job[]
  JobSeekerProfile JobSeekerProfile[]
}

model Company {
  id           String   @id @default(cuid())
  companyEmail String   @unique
  companyName  String   @unique
  ownerId      String?
  owner        User?    @relation(fields: [ownerId], references: [id])
  address      Address?
  Job          Job[]
}

model Job {
  id                String       @id @default(cuid())
  title             String
  description       String
  howToApply        String?
  workSchedule      WorkSchedule @default(NOT_SPECIFIED)
  country           String
  city              String
  startDate         String
  occupation        String?
  contractType      ContractType @default(NOT_SPECIFIED)
  ownerId           String?
  owner             User?        @relation(fields: [ownerId], references: [id])
  companyId         String?
  company           Company?     @relation(fields: [companyId], references: [id])
  companyName       String?
  published         Boolean      @default(false)
  numberOfPositions Int          @default(1)
  datePosted        DateTime?

  educationLevelId String?
  education        EducationLevel? @relation(fields: [educationLevelId], references: [id])
  experienceId     String?
  experience       Experience?     @relation(fields: [experienceId], references: [id])
  sector           Sector?         @relation(fields: [sectorId], references: [id])
  sectorId         String?

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Purchase  Purchase[]
}

enum PurchaseStatus {
  PENDING
  COMPLETED
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  status  PurchaseStatus @default(PENDING)
  orderID String         @unique

  jobId String
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, jobId])
  @@index([jobId])
}

model ScrapedJob {
  id                String  @id @default(uuid())
  title             String
  description       String
  howToApply        String?
  workSchedule      String
  country           String
  city              String
  startDate         String?
  datePosted        String?
  occupation        String?
  contractType      String
  company           String?
  numberOfPositions Int     @default(1)

  educationLevel  String?
  experienceLevel String?
  sector          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id          String   @id @default(cuid())
  title       String   @unique
  content     String?
  epigraph    String?
  imageUrl    String?
  authorId    String?
  author      User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
  isPublished Boolean  @default(false)
  slug        String   @unique
  views       Int      @default(0)
  categoryId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  isFeatured  Boolean  @default(false)
}

model Occupation {
  id          String   @id @default(cuid())
  title       String   @unique
  subOccupations SubOccupation[]
}

model SubOccupation {
  id          String   @id @default(cuid())
  title       String   @unique

  occupationId String
  occupation   Occupation    @relation(fields: [occupationId], references: [id], onDelete: Cascade)
}
