generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model JobSeekerProfile {
  id                String              @id @default(cuid())
  userId            String              @unique
  occupation        String?
  country           String?
  educationLevelId  String?
  experienceId      String?
  sectorId          String?
  cvHeadLine        String?
  profileSummary    String?
  certificates      Certificate[]
  employmentDetails EmploymentDetails[]
  education         EducationLevel?     @relation(fields: [educationLevelId], references: [id])
  experience        Experience?         @relation(fields: [experienceId], references: [id])
  sector            Sector?             @relation(fields: [sectorId], references: [id])
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills            Skill[]
  desiredJob        DesiredJob?
  personalDetails   PersonalDetails?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DesiredJob {
  id                 String           @id @default(cuid())
  designation        String
  location           String
  industry           String
  jobSeekerProfileId String           @unique
  jobSeekerProfile   JobSeekerProfile @relation(fields: [jobSeekerProfileId], references: [id], onDelete: Cascade)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model EmploymentDetails {
  id                 String           @id @default(cuid())
  designation        String?
  company            String?
  location           String?
  description        String?
  currentlyWorking   Boolean          @default(false)
  startMonth         String
  startYear          String
  endMonth           String?
  endYear            String?
  jobSeekerProfileId String
  profile            JobSeekerProfile @relation(fields: [jobSeekerProfileId], references: [id], onDelete: Cascade)
}

model PersonalDetails {
  id                     String           @id @default(cuid())
  dateOfBirth            DateTime
  gender                 String
  nationality            String
  maritalStatus          String
  drivingLicense         Boolean
  currentLocation        String
  languagesKnown         String
  visaStatus             String
  religion               String?
  alternateEmail         String?
  alternateContactNumber String?
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  jobSeekerProfileId     String           @unique
  jobSeekerProfile       JobSeekerProfile @relation(fields: [jobSeekerProfileId], references: [id], onDelete: Cascade)
}

model Skill {
  id                 String           @id @default(cuid())
  skill              String
  jobSeekerProfileId String
  profile            JobSeekerProfile @relation(fields: [jobSeekerProfileId], references: [id], onDelete: Cascade)
}

model Certificate {
  id                    String           @id @default(cuid())
  name                  String
  lastUsed              String
  totalExperienceYears  Int              @default(0)
  totalExperienceMonths Int              @default(0)
  jobSeekerProfileId    String
  profile               JobSeekerProfile @relation(fields: [jobSeekerProfileId], references: [id], onDelete: Cascade)
}

model JobSeekerProfilePercentage {
  id                 String @id @default(cuid())
  jobSeekerProfileId String @unique
  percentage         Int    @default(0)
}

model Profile {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  phoneNumber String?
  dateOfBirth DateTime?
  oldEmail    String?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Candidate {
  id          String @id @default(cuid())
  candidateId String
  employerId  String
  employer    User   @relation(fields: [employerId], references: [id], onDelete: Cascade)

  @@unique([candidateId, employerId])
}

model User {
  id                        String            @id @default(uuid())
  name                      String?
  email                     String            @unique
  emailVerified             DateTime?
  isVerified                Boolean           @default(false)
  image                     String?
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
  password                  String?
  role                      Role              @default(USER)
  forgotPasswordToken       String?
  forgotPasswordTokenExpiry DateTime?
  verifyToken               String?
  verifyTokenExpiry         DateTime?
  applications              Application[]
  cv                        CV?
  candidates                Candidate[]
  Job                       Job[]
  jobSeekerProfile          JobSeekerProfile?
  Post                      Post[]
  profile                   Profile?
  employerProfile           EmployerProfile?
  address                   Address?

  @@map("users")
}

model CV {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GCPData {
  id               String   @id @default(cuid())
  urlExpiryDate    DateTime
  blobName         String
  assetId          String   @unique
  assetName        String
  assetType        String
  validityDuration Int      @default(7)
  downloadUrl      String
}

model EmployerProfile {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  company Company?
}

model Address {
  id         String @id @default(cuid())
  city       String
  postalCode String
  country    String

  addressLineOne String
  addressLineTwo String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id           String  @id @default(cuid())
  companyEmail String? @unique
  companyName  String  @unique
  jobs         Job[]

  employerProfileId String          @unique
  employerProfile   EmployerProfile @relation(fields: [employerProfileId], references: [id], onDelete: Cascade)

  sectorId String?
  sector   Sector? @relation(fields: [sectorId], references: [id])
}

model EducationLevel {
  id               String             @id @default(cuid())
  label            String             @unique
  Job              Job[]
  JobSeekerProfile JobSeekerProfile[]
}

model Experience {
  id               String             @id @default(cuid())
  label            String             @unique
  Job              Job[]
  JobSeekerProfile JobSeekerProfile[]
}

model Sector {
  id               String             @id @default(cuid())
  label            String             @unique
  Job              Job[]
  JobSeekerProfile JobSeekerProfile[]
  Company          Company[]
}

enum JOBTYPE {
  NORMAL
  WALK_IN_INTERVIEW
}

enum JOBSTATUS {
  OPEN
  CLOSED
  DRAFT
}

enum JOBSOURCE {
  COMPANY
  JOB_BOARD
  SCRAPPER
}

model Job {
  id                String          @id @default(cuid())
  title             String
  description       String
  howToApply        String?
  workSchedule      WorkSchedule    @default(NOT_SPECIFIED)
  country           String
  city              String
  startDate         String
  occupation        String?
  contractType      ContractType    @default(NOT_SPECIFIED)
  ownerId           String?
  companyId         String?
  companyName       String?
  published         Boolean         @default(false)
  numberOfPositions Int             @default(1)
  datePosted        DateTime?
  educationLevelId  String?
  experienceId      String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  isFeatured        Boolean         @default(false)
  isOpen            Boolean         @default(true)
  salary            String?
  applications      Application[]
  company           Company?        @relation(fields: [companyId], references: [id])
  education         EducationLevel? @relation(fields: [educationLevelId], references: [id])
  experience        Experience?     @relation(fields: [experienceId], references: [id])
  owner             User?           @relation(fields: [ownerId], references: [id])
  sectorId          String?
  sector            Sector?         @relation(fields: [sectorId], references: [id])
  Purchase          Purchase[]
  jobType           JOBTYPE         @default(NORMAL)
  source            JOBSOURCE       @default(COMPANY)
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

model Application {
  id        String            @id @default(cuid())
  userId    String
  jobId     String
  job       Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    ApplicationStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@unique([userId, jobId])
}

model Purchase {
  id        String         @id @default(uuid())
  userId    String
  status    PurchaseStatus @default(PENDING)
  orderID   String         @unique
  jobId     String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  job       Job            @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
  @@index([jobId])
}

model ScrapedJob {
  id                String   @id @default(uuid())
  title             String
  description       String
  howToApply        String?
  workSchedule      String
  country           String
  city              String
  startDate         String?
  datePosted        String?
  occupation        String?
  contractType      String
  company           String?
  numberOfPositions Int      @default(1)
  educationLevel    String?
  experienceLevel   String?
  sector            String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Service {
  id          String  @id @default(cuid())
  title       String  @unique
  description String?
  slug        String  @unique
}

model Post {
  id          String   @id @default(cuid())
  title       String   @unique
  content     String?
  epigraph    String?
  imageUrl    String?
  authorId    String?
  isPublished Boolean  @default(false)
  slug        String   @unique
  views       Int      @default(0)
  categoryId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  isFeatured  Boolean  @default(false)
  author      User?    @relation(fields: [authorId], references: [id])
}

model Occupation {
  id             String          @id @default(cuid())
  title          String          @unique
  subOccupations SubOccupation[]
}

model SubOccupation {
  id           String     @id @default(cuid())
  title        String     @unique
  occupationId String
  occupation   Occupation @relation(fields: [occupationId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  STAFF
  ADMIN
  JOB_SEEKER
  EMPLOYER
}

enum WorkSchedule {
  FULL_TIME
  PART_TIME
  CONTRACTOR
  TEMPORARY
  SEASONAL
  NOT_SPECIFIED
}

enum ContractType {
  INTERNSHIP
  DIRECT_HIRE
  NOT_SPECIFIED
  CONTRACT_TO_HIRE
  TEMPORARY
  TEMPORARY_TO_HIRE
  SELF_EMPLOYED
  CONTRACT
  SEASONAL
  APPRENTICESHIP
  RECRUITMENT_RESERVE
  ON_CALL
  VOLUNTEER
}

enum PurchaseStatus {
  PENDING
  COMPLETED
}
